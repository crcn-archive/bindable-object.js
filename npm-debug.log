0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.1.4
3 info using node@v0.10.30
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec { raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/craig/Developer/Public/bindable-object.js',
7 silly cache add   type: 'directory' }
8 verbose tar pack [ '/Users/craig/.npm/bindable-object/0.0.4/package.tgz',
8 verbose tar pack   '/Users/craig/Developer/Public/bindable-object.js' ]
9 verbose tarball /Users/craig/.npm/bindable-object/0.0.4/package.tgz
10 verbose folder /Users/craig/Developer/Public/bindable-object.js
11 info prepublish bindable-object@0.0.4
12 verbose addLocalTarball adding from inside cache /Users/craig/.npm/bindable-object/0.0.4/package.tgz
13 silly cache afterAdd bindable-object@0.0.4
14 verbose afterAdd /Users/craig/.npm/bindable-object/0.0.4/package/package.json not in flight; writing
15 verbose afterAdd /Users/craig/.npm/bindable-object/0.0.4/package/package.json written
16 silly publish { name: 'bindable-object',
16 silly publish   version: '0.0.4',
16 silly publish   description: 'Two-way data binding means linking properties of two separate objects - when one changes, the other will automatically update with that change.  It enables much easier interactions between data models and UIs, among other uses outside of MVC.',
16 silly publish   main: './lib/index.js',
16 silly publish   scripts: { test: 'mocha' },
16 silly publish   repository:
16 silly publish    { type: 'git',
16 silly publish      url: 'https://github.com/mojo-js/bindable-object.js.git' },
16 silly publish   author: '',
16 silly publish   license: 'ISC',
16 silly publish   bugs: { url: 'https://github.com/mojo-js/bindable-object.js/issues' },
16 silly publish   homepage: 'https://github.com/mojo-js/bindable-object.js',
16 silly publish   dependencies:
16 silly publish    { 'fast-event-emitter': '0.0.x',
16 silly publish      'frame-runner': '0.0.x',
16 silly publish      toarray: '0.0.1' },
16 silly publish   readme: '\n\nTwo-way data binding means linking properties of two separate objects - when one changes, the other will automatically update with that change.  It enables much easier interactions between data models and UIs, among other uses outside of MVC.\n\n\n\n```javascript\nvar bindable = require("bindable");\n\nvar person = new bindable.Object({\n  name: "craig",\n  last: "condon",\n  location: {\n    city: "San Francisco"\n  }\n});\n\nperson.bind("location.zip", function(value) {\n  // 94102\n}).now();\n\n//triggers the binding\nperson.set("location.zip", "94102");\n\n//bind location.zip to another property in the model, and do it only once\nperson.bind("location.zip", { to: "zip", max: 1 }).now();\n\n//bind location.zip to another object, and make it bi-directional.\nperson.bind("location.zip", { target: anotherModel, to: "location.zip", bothWays: true }).now();\n\n//chain to multiple items, and limit it!\nperson.bind("location.zip", { to: ["property", "anotherProperty"], max: 1 }).now();\n\n\n//you can also transform data as it\'s being bound\nperson.bind("name", {\n  to: "name2",\n  map: function (name) {\n    return name.toUpperCase();\n  }\n}).now();\n```\n\n### Installation\n\n```\nnpm install bindable --save-exact\n```\n\n#### Object(properties)\n\ncreates a new bindable object\n\n#### value get(property)\n\nReturns a property on the bindable object\n\n```javascript\nvar bindable = require("bindable@0.6.1");\nvar obj = new bindable.Object({ city: { name: "SF" } });\nconsole.log(obj.get("city"));      // { name: "SF" }\nconsole.log("no getter", bindable.city); // { name: "SF" }\nconsole.log(obj.get("city.name")); // SF\nconsole.log("no getter", bindable.city.name); // { name: "SF" }\n```\n\n#### set(property, value)\n\nSets a value to the bindable object\n\n```javascript\nvar bindable = require("bindable@0.6.1");\nvar obj = new bindable.Object();\nobj.set("city.name", "SF");\nconsole.log(obj.get("city.name")); // SF\n```\n\n#### setProperties(properties)\n\nsets multiple properties on the bindable object\n\n```javascript\nvar bindable = require("bindable@0.6.1");\nvar person = new bindable.Object();\nperson.setProperties({\n  firstName: "Jon",\n  lastName: "Doe"\n});\nconsole.log(person.get("firstName"), person.get("lastName")); // Jon Doe\n```\n\n#### has(property)\n\nReturns true if the bindable object has a given property\n\n```javascript\nvar bindable = require("bindable@0.6.1");\nvar obj = new bindable.Object({ count: 0, male: false, name: "craig" });\n\nconsole.log(obj.has("count")); // true\nconsole.log(obj.has("male")); // true\nconsole.log(obj.has("name")); // true\nconsole.log(obj.has("city")); // false\n```\n\n#### listener on(event, callback)\n\nadds a new listener to the bindable object\n\n#### emit(event[,args...])\n\nemits a new event\n\n```javascript\nvar bindable = require("bindable@0.6.1");\nvar person = new bindable.Object();\n\nperson.on("blarg", function (arg1, arg2) {\n  console.log(arg1, arg2);\n});\n\nperson.emit("blarg", "something!", "something again!!");\n```\n\n#### once(event, callback)\n\nlistens to one event, then disposes the listener.\n\n```javascript\nvar bindable = require("bindable@0.6.1");\nvar person = new bindable.Object();\n\nperson.once("blarg", function (arg1, arg2) {\n  console.log(arg1, arg2);\n});\n\nperson.emit("blarg", "something!", "something again!!");\nperson.emit("blarg", "never caught again!");\n```\n\n#### removeAllListeners([type])\n\nreturns all the listeners on the bindable object\n\n#### binding bind(from, options)\n\n`options` - the options for the binding\n  - `to` - the property to bind to. Can be a `string`, `array`, or `function`\n  - `target` - the target bindable object. Default is self\n  - `max` - max number of times to run the data-binding\n  - `when` - tests the data-bound value before setting\n  - `map` - transforms the data-bound value\n  - `bothWays` - makes the data-binding bi-directional.\n\n\n```javascript\nvar bindable = require("bindable");\nvar obj = new bindable.Object({ name: "craig" });\n\n// bind the name, but transform it to upper case\nobj.bind("name", { to: "name2", map: function (name) {\n  return String(name).toUpperCase();\n}}).now();\n\nconsole.log(obj.get("name"), obj.get("name2"));\nobj.set("name", "jeff");\nconsole.log(obj.get("name"), obj.get("name2"));\n```\n\n\n#### binding.now()\n\nExecutes a binding now\n\n```javascript\nvar bindable = require("bindable");\nvar person = new bindable.Object({ name: "jeff" });\nperson.bind("name", function (name, oldName) {\n  console.log("binding called, name is: ", name);\n}).now();\n\n// above is triggered\nperson.set("name", "joe");\n```\n\n\n#### binding.dispose()\n\nDisposes a binding\n\n```javascript\nvar bindable = require("bindable");\nvar person = new bindable.Object({ name: "jeff" });\n\nvar binding = person.bind("name", function (name, oldName) {\n  console.log("binding called, name is: ", name);\n}).now();\n\nbinding.dispose();\n\nperson.set("name", "jake"); // binding not triggered\n```\n\n\n#### Events\n\nBindable objects emit a few events:\n\n- `change:*` - emitted when a property changes on the bindable object. E.g: `change:location.zip`.\n- `change` - emitted when any property changes on the bindable object\n- `watching` - emitted when a property is being watched\n- `dispose` - emitted when `dispose()` is called on a bindable object\n\n```javascript\nvar bindable = require("bindable");\nvar person = new bindable.Object({ name: "jeff" });\n\nperson.on("change:name", function (newName) {\n  console.log("the name changed to", newName);\n});\n\nperson.on("change", function (key, value) {\n  console.log("some value has changed: ", key, "=", value);\n});\n\nperson.on("watching", function (property) {\n  console.log("watching ", property);\n});\n\nperson.on("dispose", function () {\n  console.log("the object was disposed");\n});\n\nperson.set("name", "james");\nperson.set("city", "sf");\nperson.bind("name", function(){}); // trigger watching\nperson.dispose();\n```\n',
16 silly publish   readmeFilename: 'README.md',
16 silly publish   gitHead: 'a8e023b3344eb60a38bba37df1f6890f20bf9548',
16 silly publish   _id: 'bindable-object@0.0.4',
16 silly publish   _shasum: '3f6a0ed4a732e32ab0ee782baa27285edf06d62f',
16 silly publish   _from: '.' }
17 verbose mapToRegistry name bindable-object
18 verbose mapToRegistry uri http://registry.npmjs.org/bindable-object
19 verbose publish registryBase http://registry.npmjs.org/
20 verbose request on initialization, where is /bindable-object
21 verbose request after pass 1, where is /bindable-object
22 verbose request url raw /bindable-object
23 verbose request resolving registry [ 'http://registry.npmjs.org/', './bindable-object' ]
24 verbose request after pass 2, where is http://registry.npmjs.org/bindable-object
25 verbose request sending authorization for write operation
26 info attempt registry request try #1 at 20:04:10
27 verbose request id b1e478baafbce676
28 http request PUT http://registry.npmjs.org/bindable-object
29 http 403 http://registry.npmjs.org/bindable-object
30 verbose headers { server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
30 verbose headers   'content-type': 'application/json',
30 verbose headers   'cache-control': 'max-age=60',
30 verbose headers   'content-length': '10445',
30 verbose headers   'accept-ranges': 'bytes',
30 verbose headers   date: 'Mon, 27 Oct 2014 03:04:10 GMT',
30 verbose headers   via: '1.1 varnish',
30 verbose headers   connection: 'keep-alive',
30 verbose headers   'x-served-by': 'cache-sjc3130-SJC',
30 verbose headers   'x-cache': 'MISS',
30 verbose headers   'x-cache-hits': '0',
30 verbose headers   'x-timer': 'S1414379050.298955,VS0,VE195' }
31 error publish Failed PUT 403
32 verbose stack Error: forbidden cannot modify pre-existing version: 0.0.4
32 verbose stack old={"name":"bindable-object","version":"0.0.4","description":"Two-way data binding means linking properties of two separate objects - when one changes, the other will automatically update with that change.  It enables much easier interactions between data models and UIs, among other uses outside of MVC.","main":"./lib/index.js","scripts":{"test":"mocha"},"repository":{"type":"git","url":"https://github.com/mojo-js/bindable-object.js.git"},"author":"","license":"ISC","bugs":{"url":"https://github.com/mojo-js/bindable-object.js/issues"},"homepage":"https://github.com/mojo-js/bindable-object.js","dependencies":{"fast-event-emitter":"0.0.x","frame-runner":"0.0.x","toarray":"0.0.1"},"gitHead":"74a916f18b90df2d4d66b714bfff3317aa181f49","_id":"bindable-object@0.0.4","_shasum":"3f6a0ed4a732e32ab0ee782baa27285edf06d62f","_from":".","_npmVersion":"2.1.4","_nodeVersion":"0.10.30","_npmUser":{"name":"architectd","email":"craig.j.condon@gmail.com"},"maintainers":[{"name":"architectd","email":"craig.j.condon@gmail.com"}],"dist":{"shasum":"3f6a0ed4a732e32ab0ee782baa27285edf06d62f","tarball":"http://registry.npmjs.org/bindable-object/-/bindable-object-0.0.4.tgz"}}
32 verbose stack new={"name":"bindable-object","version":"0.0.4","description":"Two-way data binding means linking properties of two separate objects - when one changes, the other will automatically update with that change.  It enables much easier interactions between data models and UIs, among other uses outside of MVC.","main":"./lib/index.js","scripts":{"test":"mocha"},"repository":{"type":"git","url":"https://github.com/mojo-js/bindable-object.js.git"},"author":"","license":"ISC","bugs":{"url":"https://github.com/mojo-js/bindable-object.js/issues"},"homepage":"https://github.com/mojo-js/bindable-object.js","dependencies":{"fast-event-emitter":"0.0.x","frame-runner":"0.0.x","toarray":"0.0.1"},"readme":"\u000a\u000aTwo-way data binding means linking properties of two separate objects - when one changes, the other will automatically update with that change.  It enables much easier interactions between data models and UIs, among other uses outside of MVC.\u000a\u000a\u000a\u000a```javascript\u000avar bindable = require(\"bindable\");\u000a\u000avar person = new bindable.Object({\u000a  name: \"craig\",\u000a  last: \"condon\",\u000a  location: {\u000a    city: \"San Francisco\"\u000a  }\u000a});\u000a\u000aperson.bind(\"location.zip\", function(value) {\u000a  // 94102\u000a}).now();\u000a\u000a//triggers the binding\u000aperson.set(\"location.zip\", \"94102\");\u000a\u000a//bind location.zip to another property in the model, and do it only once\u000aperson.bind(\"location.zip\", { to: \"zip\", max: 1 }).now();\u000a\u000a//bind location.zip to another object, and make it bi-directional.\u000aperson.bind(\"location.zip\", { target: anotherModel, to: \"location.zip\", bothWays: true }).now();\u000a\u000a//chain to multiple items, and limit it!\u000aperson.bind(\"location.zip\", { to: [\"property\", \"anotherProperty\"], max: 1 }).now();\u000a\u000a\u000a//you can also transform data as it's being bound\u000aperson.bind(\"name\", {\u000a  to: \"name2\",\u000a  map: function (name) {\u000a    return name.toUpperCase();\u000a  }\u000a}).now();\u000a```\u000a\u000a### Installation\u000a\u000a```\u000anpm install bindable --save-exact\u000a```\u000a\u000a#### Object(properties)\u000a\u000acreates a new bindable object\u000a\u000a#### value get(property)\u000a\u000aReturns a property on the bindable object\u000a\u000a```javascript\u000avar bindable = require(\"bindable@0.6.1\");\u000avar obj = new bindable.Object({ city: { name: \"SF\" } });\u000aconsole.log(obj.get(\"city\"));      // { name: \"SF\" }\u000aconsole.log(\"no getter\", bindable.city); // { name: \"SF\" }\u000aconsole.log(obj.get(\"city.name\")); // SF\u000aconsole.log(\"no getter\", bindable.city.name); // { name: \"SF\" }\u000a```\u000a\u000a#### set(property, value)\u000a\u000aSets a value to the bindable object\u000a\u000a```javascript\u000avar bindable = require(\"bindable@0.6.1\");\u000avar obj = new bindable.Object();\u000aobj.set(\"city.name\", \"SF\");\u000aconsole.log(obj.get(\"city.name\")); // SF\u000a```\u000a\u000a#### setProperties(properties)\u000a\u000asets multiple properties on the bindable object\u000a\u000a```javascript\u000avar bindable = require(\"bindable@0.6.1\");\u000avar person = new bindable.Object();\u000aperson.setProperties({\u000a  firstName: \"Jon\",\u000a  lastName: \"Doe\"\u000a});\u000aconsole.log(person.get(\"firstName\"), person.get(\"lastName\")); // Jon Doe\u000a```\u000a\u000a#### has(property)\u000a\u000aReturns true if the bindable object has a given property\u000a\u000a```javascript\u000avar bindable = require(\"bindable@0.6.1\");\u000avar obj = new bindable.Object({ count: 0, male: false, name: \"craig\" });\u000a\u000aconsole.log(obj.has(\"count\")); // true\u000aconsole.log(obj.has(\"male\")); // true\u000aconsole.log(obj.has(\"name\")); // true\u000aconsole.log(obj.has(\"city\")); // false\u000a```\u000a\u000a#### listener on(event, callback)\u000a\u000aadds a new listener to the bindable object\u000a\u000a#### emit(event[,args...])\u000a\u000aemits a new event\u000a\u000a```javascript\u000avar bindable = require(\"bindable@0.6.1\");\u000avar person = new bindable.Object();\u000a\u000aperson.on(\"blarg\", function (arg1, arg2) {\u000a  console.log(arg1, arg2);\u000a});\u000a\u000aperson.emit(\"blarg\", \"something!\", \"something again!!\");\u000a```\u000a\u000a#### once(event, callback)\u000a\u000alistens to one event, then disposes the listener.\u000a\u000a```javascript\u000avar bindable = require(\"bindable@0.6.1\");\u000avar person = new bindable.Object();\u000a\u000aperson.once(\"blarg\", function (arg1, arg2) {\u000a  console.log(arg1, arg2);\u000a});\u000a\u000aperson.emit(\"blarg\", \"something!\", \"something again!!\");\u000aperson.emit(\"blarg\", \"never caught again!\");\u000a```\u000a\u000a#### removeAllListeners([type])\u000a\u000areturns all the listeners on the bindable object\u000a\u000a#### binding bind(from, options)\u000a\u000a`options` - the options for the binding\u000a  - `to` - the property to bind to. Can be a `string`, `array`, or `function`\u000a  - `target` - the target bindable object. Default is self\u000a  - `max` - max number of times to run the data-binding\u000a  - `when` - tests the data-bound value before setting\u000a  - `map` - transforms the data-bound value\u000a  - `bothWays` - makes the data-binding bi-directional.\u000a\u000a\u000a```javascript\u000avar bindable = require(\"bindable\");\u000avar obj = new bindable.Object({ name: \"craig\" });\u000a\u000a// bind the name, but transform it to upper case\u000aobj.bind(\"name\", { to: \"name2\", map: function (name) {\u000a  return String(name).toUpperCase();\u000a}}).now();\u000a\u000aconsole.log(obj.get(\"name\"), obj.get(\"name2\"));\u000aobj.set(\"name\", \"jeff\");\u000aconsole.log(obj.get(\"name\"), obj.get(\"name2\"));\u000a```\u000a\u000a\u000a#### binding.now()\u000a\u000aExecutes a binding now\u000a\u000a```javascript\u000avar bindable = require(\"bindable\");\u000avar person = new bindable.Object({ name: \"jeff\" });\u000aperson.bind(\"name\", function (name, oldName) {\u000a  console.log(\"binding called, name is: \", name);\u000a}).now();\u000a\u000a// above is triggered\u000aperson.set(\"name\", \"joe\");\u000a```\u000a\u000a\u000a#### binding.dispose()\u000a\u000aDisposes a binding\u000a\u000a```javascript\u000avar bindable = require(\"bindable\");\u000avar person = new bindable.Object({ name: \"jeff\" });\u000a\u000avar binding = person.bind(\"name\", function (name, oldName) {\u000a  console.log(\"binding called, name is: \", name);\u000a}).now();\u000a\u000abinding.dispose();\u000a\u000aperson.set(\"name\", \"jake\"); // binding not triggered\u000a```\u000a\u000a\u000a#### Events\u000a\u000aBindable objects emit a few events:\u000a\u000a- `change:*` - emitted when a property changes on the bindable object. E.g: `change:location.zip`.\u000a- `change` - emitted when any property changes on the bindable object\u000a- `watching` - emitted when a property is being watched\u000a- `dispose` - emitted when `dispose()` is called on a bindable object\u000a\u000a```javascript\u000avar bindable = require(\"bindable\");\u000avar person = new bindable.Object({ name: \"jeff\" });\u000a\u000aperson.on(\"change:name\", function (newName) {\u000a  console.log(\"the name changed to\", newName);\u000a});\u000a\u000aperson.on(\"change\", function (key, value) {\u000a  console.log(\"some value has changed: \", key, \"=\", value);\u000a});\u000a\u000aperson.on(\"watching\", function (property) {\u000a  console.log(\"watching \", property);\u000a});\u000a\u000aperson.on(\"dispose\", function () {\u000a  console.log(\"the object was disposed\");\u000a});\u000a\u000aperson.set(\"name\", \"james\");\u000aperson.set(\"city\", \"sf\");\u000aperson.bind(\"name\", function(){}); // trigger watching\u000aperson.dispose();\u000a```\u000a","readmeFilename":"README.md","gitHead":"a8e023b3344eb60a38bba37df1f6890f20bf9548","_id":"bindable-object@0.0.4","_shasum":"3f6a0ed4a732e32ab0ee782baa27285edf06d62f","_from":".","_npmVersion":"2.1.4","_nodeVersion":"0.10.30","_npmUser":{"name":"architectd","email":"craig.j.condon@gmail.com"},"maintainers":[{"name":"architectd","email":"craig.j.condon@gmail.com"}],"dist":{"shasum":"3f6a0ed4a732e32ab0ee782baa27285edf06d62f","tarball":"http://registry.npmjs.org/bindable-object/-/bindable-object-0.0.4.tgz"}}: bindable-object
32 verbose stack     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:260:14)
32 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:197:65)
32 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:237:22)
32 verbose stack     at Request.emit (events.js:98:17)
32 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1146:14)
32 verbose stack     at Request.emit (events.js:117:20)
32 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1097:12)
32 verbose stack     at IncomingMessage.emit (events.js:117:20)
32 verbose stack     at _stream_readable.js:938:16
32 verbose stack     at process._tickCallback (node.js:419:13)
33 verbose statusCode 403
34 verbose pkgid bindable-object
35 verbose cwd /Users/craig/Developer/Public/bindable-object.js
36 error Darwin 14.0.0
37 error argv "node" "/usr/local/bin/npm" "publish"
38 error node v0.10.30
39 error npm  v2.1.4
40 error code E403
41 error forbidden cannot modify pre-existing version: 0.0.4
41 error old={"name":"bindable-object","version":"0.0.4","description":"Two-way data binding means linking properties of two separate objects - when one changes, the other will automatically update with that change.  It enables much easier interactions between data models and UIs, among other uses outside of MVC.","main":"./lib/index.js","scripts":{"test":"mocha"},"repository":{"type":"git","url":"https://github.com/mojo-js/bindable-object.js.git"},"author":"","license":"ISC","bugs":{"url":"https://github.com/mojo-js/bindable-object.js/issues"},"homepage":"https://github.com/mojo-js/bindable-object.js","dependencies":{"fast-event-emitter":"0.0.x","frame-runner":"0.0.x","toarray":"0.0.1"},"gitHead":"74a916f18b90df2d4d66b714bfff3317aa181f49","_id":"bindable-object@0.0.4","_shasum":"3f6a0ed4a732e32ab0ee782baa27285edf06d62f","_from":".","_npmVersion":"2.1.4","_nodeVersion":"0.10.30","_npmUser":{"name":"architectd","email":"craig.j.condon@gmail.com"},"maintainers":[{"name":"architectd","email":"craig.j.condon@gmail.com"}],"dist":{"shasum":"3f6a0ed4a732e32ab0ee782baa27285edf06d62f","tarball":"http://registry.npmjs.org/bindable-object/-/bindable-object-0.0.4.tgz"}}
41 error new={"name":"bindable-object","version":"0.0.4","description":"Two-way data binding means linking properties of two separate objects - when one changes, the other will automatically update with that change.  It enables much easier interactions between data models and UIs, among other uses outside of MVC.","main":"./lib/index.js","scripts":{"test":"mocha"},"repository":{"type":"git","url":"https://github.com/mojo-js/bindable-object.js.git"},"author":"","license":"ISC","bugs":{"url":"https://github.com/mojo-js/bindable-object.js/issues"},"homepage":"https://github.com/mojo-js/bindable-object.js","dependencies":{"fast-event-emitter":"0.0.x","frame-runner":"0.0.x","toarray":"0.0.1"},"readme":"\u000a\u000aTwo-way data binding means linking properties of two separate objects - when one changes, the other will automatically update with that change.  It enables much easier interactions between data models and UIs, among other uses outside of MVC.\u000a\u000a\u000a\u000a```javascript\u000avar bindable = require(\"bindable\");\u000a\u000avar person = new bindable.Object({\u000a  name: \"craig\",\u000a  last: \"condon\",\u000a  location: {\u000a    city: \"San Francisco\"\u000a  }\u000a});\u000a\u000aperson.bind(\"location.zip\", function(value) {\u000a  // 94102\u000a}).now();\u000a\u000a//triggers the binding\u000aperson.set(\"location.zip\", \"94102\");\u000a\u000a//bind location.zip to another property in the model, and do it only once\u000aperson.bind(\"location.zip\", { to: \"zip\", max: 1 }).now();\u000a\u000a//bind location.zip to another object, and make it bi-directional.\u000aperson.bind(\"location.zip\", { target: anotherModel, to: \"location.zip\", bothWays: true }).now();\u000a\u000a//chain to multiple items, and limit it!\u000aperson.bind(\"location.zip\", { to: [\"property\", \"anotherProperty\"], max: 1 }).now();\u000a\u000a\u000a//you can also transform data as it's being bound\u000aperson.bind(\"name\", {\u000a  to: \"name2\",\u000a  map: function (name) {\u000a    return name.toUpperCase();\u000a  }\u000a}).now();\u000a```\u000a\u000a### Installation\u000a\u000a```\u000anpm install bindable --save-exact\u000a```\u000a\u000a#### Object(properties)\u000a\u000acreates a new bindable object\u000a\u000a#### value get(property)\u000a\u000aReturns a property on the bindable object\u000a\u000a```javascript\u000avar bindable = require(\"bindable@0.6.1\");\u000avar obj = new bindable.Object({ city: { name: \"SF\" } });\u000aconsole.log(obj.get(\"city\"));      // { name: \"SF\" }\u000aconsole.log(\"no getter\", bindable.city); // { name: \"SF\" }\u000aconsole.log(obj.get(\"city.name\")); // SF\u000aconsole.log(\"no getter\", bindable.city.name); // { name: \"SF\" }\u000a```\u000a\u000a#### set(property, value)\u000a\u000aSets a value to the bindable object\u000a\u000a```javascript\u000avar bindable = require(\"bindable@0.6.1\");\u000avar obj = new bindable.Object();\u000aobj.set(\"city.name\", \"SF\");\u000aconsole.log(obj.get(\"city.name\")); // SF\u000a```\u000a\u000a#### setProperties(properties)\u000a\u000asets multiple properties on the bindable object\u000a\u000a```javascript\u000avar bindable = require(\"bindable@0.6.1\");\u000avar person = new bindable.Object();\u000aperson.setProperties({\u000a  firstName: \"Jon\",\u000a  lastName: \"Doe\"\u000a});\u000aconsole.log(person.get(\"firstName\"), person.get(\"lastName\")); // Jon Doe\u000a```\u000a\u000a#### has(property)\u000a\u000aReturns true if the bindable object has a given property\u000a\u000a```javascript\u000avar bindable = require(\"bindable@0.6.1\");\u000avar obj = new bindable.Object({ count: 0, male: false, name: \"craig\" });\u000a\u000aconsole.log(obj.has(\"count\")); // true\u000aconsole.log(obj.has(\"male\")); // true\u000aconsole.log(obj.has(\"name\")); // true\u000aconsole.log(obj.has(\"city\")); // false\u000a```\u000a\u000a#### listener on(event, callback)\u000a\u000aadds a new listener to the bindable object\u000a\u000a#### emit(event[,args...])\u000a\u000aemits a new event\u000a\u000a```javascript\u000avar bindable = require(\"bindable@0.6.1\");\u000avar person = new bindable.Object();\u000a\u000aperson.on(\"blarg\", function (arg1, arg2) {\u000a  console.log(arg1, arg2);\u000a});\u000a\u000aperson.emit(\"blarg\", \"something!\", \"something again!!\");\u000a```\u000a\u000a#### once(event, callback)\u000a\u000alistens to one event, then disposes the listener.\u000a\u000a```javascript\u000avar bindable = require(\"bindable@0.6.1\");\u000avar person = new bindable.Object();\u000a\u000aperson.once(\"blarg\", function (arg1, arg2) {\u000a  console.log(arg1, arg2);\u000a});\u000a\u000aperson.emit(\"blarg\", \"something!\", \"something again!!\");\u000aperson.emit(\"blarg\", \"never caught again!\");\u000a```\u000a\u000a#### removeAllListeners([type])\u000a\u000areturns all the listeners on the bindable object\u000a\u000a#### binding bind(from, options)\u000a\u000a`options` - the options for the binding\u000a  - `to` - the property to bind to. Can be a `string`, `array`, or `function`\u000a  - `target` - the target bindable object. Default is self\u000a  - `max` - max number of times to run the data-binding\u000a  - `when` - tests the data-bound value before setting\u000a  - `map` - transforms the data-bound value\u000a  - `bothWays` - makes the data-binding bi-directional.\u000a\u000a\u000a```javascript\u000avar bindable = require(\"bindable\");\u000avar obj = new bindable.Object({ name: \"craig\" });\u000a\u000a// bind the name, but transform it to upper case\u000aobj.bind(\"name\", { to: \"name2\", map: function (name) {\u000a  return String(name).toUpperCase();\u000a}}).now();\u000a\u000aconsole.log(obj.get(\"name\"), obj.get(\"name2\"));\u000aobj.set(\"name\", \"jeff\");\u000aconsole.log(obj.get(\"name\"), obj.get(\"name2\"));\u000a```\u000a\u000a\u000a#### binding.now()\u000a\u000aExecutes a binding now\u000a\u000a```javascript\u000avar bindable = require(\"bindable\");\u000avar person = new bindable.Object({ name: \"jeff\" });\u000aperson.bind(\"name\", function (name, oldName) {\u000a  console.log(\"binding called, name is: \", name);\u000a}).now();\u000a\u000a// above is triggered\u000aperson.set(\"name\", \"joe\");\u000a```\u000a\u000a\u000a#### binding.dispose()\u000a\u000aDisposes a binding\u000a\u000a```javascript\u000avar bindable = require(\"bindable\");\u000avar person = new bindable.Object({ name: \"jeff\" });\u000a\u000avar binding = person.bind(\"name\", function (name, oldName) {\u000a  console.log(\"binding called, name is: \", name);\u000a}).now();\u000a\u000abinding.dispose();\u000a\u000aperson.set(\"name\", \"jake\"); // binding not triggered\u000a```\u000a\u000a\u000a#### Events\u000a\u000aBindable objects emit a few events:\u000a\u000a- `change:*` - emitted when a property changes on the bindable object. E.g: `change:location.zip`.\u000a- `change` - emitted when any property changes on the bindable object\u000a- `watching` - emitted when a property is being watched\u000a- `dispose` - emitted when `dispose()` is called on a bindable object\u000a\u000a```javascript\u000avar bindable = require(\"bindable\");\u000avar person = new bindable.Object({ name: \"jeff\" });\u000a\u000aperson.on(\"change:name\", function (newName) {\u000a  console.log(\"the name changed to\", newName);\u000a});\u000a\u000aperson.on(\"change\", function (key, value) {\u000a  console.log(\"some value has changed: \", key, \"=\", value);\u000a});\u000a\u000aperson.on(\"watching\", function (property) {\u000a  console.log(\"watching \", property);\u000a});\u000a\u000aperson.on(\"dispose\", function () {\u000a  console.log(\"the object was disposed\");\u000a});\u000a\u000aperson.set(\"name\", \"james\");\u000aperson.set(\"city\", \"sf\");\u000aperson.bind(\"name\", function(){}); // trigger watching\u000aperson.dispose();\u000a```\u000a","readmeFilename":"README.md","gitHead":"a8e023b3344eb60a38bba37df1f6890f20bf9548","_id":"bindable-object@0.0.4","_shasum":"3f6a0ed4a732e32ab0ee782baa27285edf06d62f","_from":".","_npmVersion":"2.1.4","_nodeVersion":"0.10.30","_npmUser":{"name":"architectd","email":"craig.j.condon@gmail.com"},"maintainers":[{"name":"architectd","email":"craig.j.condon@gmail.com"}],"dist":{"shasum":"3f6a0ed4a732e32ab0ee782baa27285edf06d62f","tarball":"http://registry.npmjs.org/bindable-object/-/bindable-object-0.0.4.tgz"}}: bindable-object
42 error If you need help, you may report this error at:
42 error     <http://github.com/npm/npm/issues>
43 verbose exit [ 1, true ]
